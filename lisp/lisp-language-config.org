* paredit

#+begin_src elisp :tangle yes
  (use-package paredit
  :hook
  (clojure-mode                     . paredit-mode) ; Clojure buffers
  (emacs-lisp-mode                  . paredit-mode) ; Elisp buffers.
  (lisp-mode                        . paredit-mode) ; Common Lisp buffers.
  (lisp-interaction-mode            . paredit-mode) ; Scratch buffers.
  (ielm-mode-hook                   . paredit-mode) ; ELM buffers.
  (eval-expression-minibuffer-setup . paredit-mode) ; Eval minibuffers.
  :bind
  (:map paredit-mode-map
        ("<return>" . my/paredit-RET))
  :config
  (defun my/paredit-RET ()
    "Wraps `paredit-RET' to provide a sensible minibuffer experience."
    (interactive)
    (if (minibufferp)
        (read--expression-try-read)
      (paredit-RET))))
#+end_src

* rainbow delimeters

#+begin_src elisp :tangle yes
  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* slime for Common Lisp

#+begin_src elisp :tangle yes
  (use-package slime
  :ensure t
  :init
  ;; Load the quicklisp-slime-helper if you use Quicklisp
  (load (expand-file-name "~/quicklisp/slime-helper.el"))

  :config
  ;; Set SBCL as the inferior Lisp program
  (setq inferior-lisp-program "sbcl")

  ;; Load SLIME contrib modules for extended functionality
  (setq slime-contribs '(slime-fancy   ; comprehensive set of features
                         slime-quicklisp ; Quicklisp integration
                         slime-asdf      ; ASDF integration
                         slime-mrepl     ; multiple REPLs
                         ;; Add other contribs as needed, e.g.,
                         ;; slime-autodoc
                         ;; slime-editing-commands
                         ))
  (slime-setup slime-contribs)

  ;; Optional: Enable paredit for structural editing of Lisp code
  (autoload 'paredit-mode "paredit" "Minor mode for structural editing of Lisp code." t)
  (add-hook 'lisp-mode-hook (lambda () (paredit-mode +1)))
  (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
  (add-hook 'emacs-lisp-mode-hook (lambda () (paredit-mode +1)))
  )
#+end_src

* provide

#+begin_src elisp :tangle yes
  (provide 'lisp-language-config)
#+end_src




