* treesitter

Fuck knows why everyone goes on about it likes....

#+begin_src elisp :tangle yes
  (setq treesit-language-source-alist
        '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go" "v0.20.0"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.20.1" "src"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
          (markdown . ("https://github.com/ikatyang/tree-sitter-markdown" "v0.7.1"))
  		(clojure . ("https://github.com/sogaiu/tree-sitter-clojure" "v0.0.13"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust" "v0.21.2"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml" "v0.5.1"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))))

  (use-package treesit
    :ensure nil
    :hook
    ;; Use the modern *-ts-mode for languages that have it
    ((js-mode . js-ts-mode)
     (typescript-mode . typescript-ts-mode)
     (python-mode . python-ts-mode)
     (clojure-mode . clojure-ts-mode)))
#+end_src
* github copilot
#+begin_src elisp :tangle yes
  (use-package copilot
    :vc (:url "https://github.com/copilot-emacs/copilot.el"
              :rev :newest
              :branch "main")
    :hook ((prog-mode . copilot-mode))
    :bind (:map copilot-completion-map
  			  ("<tab>" . copilot-accept-completion))
    :config
    ;; silence indentation warnings
    (add-to-list 'warning-suppress-types '(copilot)))
#+end_src
* simplec from tsoding

#+begin_src elisp :tangle yes
  (use-package simpc-mode
    :ensure nil
    :load-path "lisp/"
    :mode ("\\.h\\(pp\\)?\\'" . simpc-mode)
    :mode ("\\.c\\(pp\\)?\\'" . simpc-mode))
#+end_src
* web-mode

#+begin_src elisp :tangle yes
  (use-package web-mode
    :ensure t
    :mode (("\\.jsx\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.html\\'" . web-mode))
    :hook (web-mode . eglot-ensure)
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-enable-auto-pairing t
          web-mode-enable-auto-closing t
          web-mode-enable-auto-quoting t
          web-mode-enable-current-element-highlight t
          web-mode-enable-auto-indentation t))
#+end_src
* emmet-mode

#+begin_src elisp :tangle yes
  (use-package emmet-mode
    :ensure t
    :hook ((web-mode css-mode sgml-mode html-mode) . emmet-mode)
    :config
    (setq emmet-move-cursor-between-quotes t))
#+end_src
* eglot
#+begin_src elisp :tangle yes
  (use-package eglot
    :ensure t
    :commands eglot-ensure
    :config
    (setq eglot-extend-to-xref t)
    (setq eglot-ignored-server-capabilities '(:documentHighlightProvider :inlayHintProvider)))

  ;; according to https://chatgpt.com/c/690268d4-4d1c-832e-9dcf-37950ba372c2  
  (add-hook 'eglot-managed-mode-hook #'flymake-mode)

  (with-eval-after-load 'eglot
    ;; Ensure Flycheck is out of the way if it happens to be on
    (add-hook 'eglot-managed-mode-hook
              (lambda ()
                (when (bound-and-true-p flycheck-mode) (flycheck-mode -1))
                (flymake-mode 1))))

#+end_src
* python
#+begin_src elisp :tangle yes
  (use-package python
    :ensure nil ;; this is built in but we configure it here
    :mode ("\\.py\\'" . python-ts-mode)
    :config
    (setq-default indent-tabs-mode t)
		    (setq-default tab-width 4)
		    (setq-default py-indent-tabs-mode t)
    (setq python-indent-offset 4)
    :hook ((python-ts-mode . eglot-ensure)
           (python-ts-mode . pyvenv-mode)
           (python-ts-mode . flycheck-mode))
    :bind (:map python-ts-mode-map
                ("C-c t p" . mrl/run-python-tests-for-project)
                ("C-c t a" . mrl/run-python-tests-for-app)
                ("C-c t b" . mrl/run-python-tests-in-buffer)
                ("C-c t f" . mrl/run-python-test-at-point)))
#+end_src

* go config
#+begin_src elisp :tangle yes
  ;;;; Go (Tree-sitter + Eglot)

  ;; obtained this config straight from ChatGPT: https://chatgpt.com/c/690268d4-4d1c-832e-9dcf-37950ba372c2

  ;; Prefer go-ts-mode if your Emacs has it; otherwise use go-mode from MELPA.
  ;; We declare both so Eglot hooks work either way.
  (with-eval-after-load 'treesit
    (when (fboundp 'go-ts-mode)
      (add-to-list 'major-mode-remap-alist '(go-mode . go-ts-mode))))

  ;; If you need fallback major mode:
  (use-package go-mode
    :ensure t
    :defer t)

  ;; Tell Eglot how to start gopls and tune it a bit
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '((go-mode go-ts-mode) . ("gopls")))
    (setq-default eglot-workspace-configuration
                  '((gopls
                     . ((ui.completion.usePlaceholders . t)
                        (gofumpt . t)               ; use gofumpt style
                        (staticcheck . t)           ; more diagnostics
                        (analyses . ((unusedparams . t)
                                     (unreachable . t)))
                        (directoryFilters . ["-node_modules" "-.git"]))))))

  (defun mrl/go--format+imports ()
    "Format buffer and organize imports with gopls (Eglot)."
    (when (and (boundp 'eglot-managed-p) eglot-managed-p)
      (eglot-format-buffer)
      ;; organize imports: run synchronously and silently
      (eglot-code-actions nil nil "source.organizeImports" t)))

  (defun mrl/go--setup ()
    ;; Use Eglot
    (eglot-ensure)
    ;; Avoid Flycheck vs Flymake duplication (Eglot uses Flymake)
    (when (bound-and-true-p flycheck-mode)
      (flycheck-mode -1))
    ;; If you want to avoid duplicate candidates (you currently enable both company & corfu)
    ;; Pick one. Example: disable company in Go buffers:
    (when (bound-and-true-p company-mode)
      (company-mode -1))
    ;; Save-hooks
    (add-hook 'before-save-hook #'mrl/go--format+imports nil t)
    ;; Nice to have: tab settings to match gofmt style
    (setq-local indent-tabs-mode t
                tab-width 8))

  ;; Hooks for both modes
  (add-hook 'go-mode-hook #'mrl/go--setup)
  (when (fboundp 'go-ts-mode)
    (add-hook 'go-ts-mode-hook #'mrl/go--setup))

  ;; Simple compile helpers for Go
  (defun mrl/go-project-root ()
    (or (when-let ((p (project-current))) (project-root p))
        (locate-dominating-file default-directory "go.mod")
        default-directory))

  (defun mrl/go--compile-in (dir cmd)
    (let ((default-directory dir))
      (compile cmd)))

  (defun mrl/go-build ()
    "go build in module root."
    (interactive)
    (mrl/go--compile-in (mrl/go-project-root) "go build ./..."))

  (defun mrl/go-test-all ()
    "go test ./... in module root."
    (interactive)
    (mrl/go--compile-in (mrl/go-project-root) "go test ./..."))

  (defun mrl/go-test-pkg ()
    "go test in the current buffer's directory (package)."
    (interactive)
    (let* ((bufdir (file-name-directory (or (buffer-file-name) default-directory))))
      (mrl/go--compile-in bufdir "go test")))

  (defun mrl/go-test-func ()
    "Run go test for the test function at point using -run."
    (interactive)
    (let* ((name (or
                  ;; Prefer Tree-sitter function name if available
                  (when (fboundp 'treesit-node-at)
                    (let* ((node (treesit-node-at (point)))
                           (def (and node (treesit-parent-until
                                           node (lambda (n)
                                                  (member (treesit-node-type n)
                                                          '("function_declaration" "method_declaration"))))))
                           (nm (and def (treesit-node-text
                                         (or (treesit-node-child-by-field-name def "name")
                                             def)))))
                      nm))
                  ;; fallback: symbol-at-point
                  (thing-at-point 'symbol t))))
      (unless (and name (string-match-p "^Test" name))
        (user-error "Point is not inside a Test* function (got: %s)" (or name "nil")))
      (let ((bufdir (file-name-directory (or (buffer-file-name) default-directory))))
        (mrl/go--compile-in bufdir (format "go test -run '^%s$'" name)))))

  ;; Keybindings (mirror your Python test bindings style)
  (with-eval-after-load 'go-mode
    (define-key go-mode-map (kbd "C-c t p") #'mrl/go-test-pkg)
    (define-key go-mode-map (kbd "C-c t a") #'mrl/go-test-all)
    (define-key go-mode-map (kbd "C-c t f") #'mrl/go-test-func)
    (define-key go-mode-map (kbd "C-c b")   #'mrl/go-build))

  (when (fboundp 'go-ts-mode)
    (with-eval-after-load 'go-ts-mode
      (define-key go-ts-mode-map (kbd "C-c t p") #'mrl/go-test-pkg)
      (define-key go-ts-mode-map (kbd "C-c t a") #'mrl/go-test-all)
      (define-key go-ts-mode-map (kbd "C-c t f") #'mrl/go-test-func)
      (define-key go-ts-mode-map (kbd "C-c b")   #'mrl/go-build)))
#+end_src

* italicise strings in python
#+begin_src elisp :tangle yes
  (add-hook 'python-ts-mode-hook
            (lambda ()
              (set-face-attribute 'font-lock-string-face nil :slant 'italic)))  
#+end_src

* pyvenv

Set up the venv automatically for python projects.

#+begin_src elisp :tangle yes
  (use-package pyvenv
  :ensure t
  :hook (python-ts-mode . (lambda ()
                            (let ((venv-dir (expand-file-name ".venv" (project-current))))
                              (when (file-directory-p venv-dir)
                                (pyvenv-activate venv-dir))))))
#+end_src
* yasnippet
#+begin_src elisp :tangle yes
  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-minor-mode)
    :bind (:map yas-minor-mode-map
                ("C-c y" . yas-expand))
    :config
    ;; Your config here
    :init
    (yas-global-mode 1))


  (use-package yasnippet-snippets)
#+end_src

* django snippets
#+begin_src elisp :tangle yes
    (use-package django-snippets
      :ensure t)
#+end_src

* direnv

Switches on environment variables if you have a .envrc file.

#+begin_src elisp :tangle yes
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

* diff-hl
#+begin_src elisp :tangle yes
  (use-package diff-hl
    :hook (prog-mode . diff-hl-mode))
#+end_src

* dockerfile-mode
#+begin_src elisp :tangle yes
  (use-package dockerfile-mode)
#+end_src

* markdown mode
#+begin_src elisp :tangle yes
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src
* provide
#+begin_src elisp :tangle yes
  (provide 'programming-generic)
#+end_src
* shell-maker, acp and  agent-shell
These support packages are apparently required to enable agent-shell (see https://github.com/xenodium/agent-shell). The ~acp~ package is not yet on MELPA apaprently.

I have this configured for Gemini CLI, as that is what I will probably use most. I am using the default Google account authorisation at this point but I could switch to the API key with a different setting - see https://github.com/xenodium/agent-shell#google-gemini. You get a decent quote of requests with the default set-up however: https://cloud.google.com/gemini/docs/quotas.

#+begin_src elisp :tangle yes
  (use-package shell-maker
    :ensure t)

  ;; (use-package acp
  ;;   :vc (:url "https://github.com/xenodium/acp.el"))

  (add-to-list 'load-path "/home/lemon/.emacs.d/lisp/acp.el/")
  (require 'acp)

  (use-package agent-shell
    :vc (:url "https://github.com/xenodium/agent-shell"))

  ;; (setq agent-shell-google-authentication
  ;;       (agent-shell-google-make-authentication :login t))

  (setq agent-shell-google-authentication
        (agent-shell-google-make-authentication
         :api-key (lambda () (auth-source-pass-get "gemini-key" "google_api_key"))))

  ;; With function
  (setq agent-shell-anthropic-authentication
        (agent-shell-anthropic-make-authentication
         :api-key (lambda () (auth-source-pass-get "api-key" "anthropic_api_key"))))


  (setq agent-shell-openai-authentication
        (agent-shell-openai-make-authentication :login t))
#+end_src

#+RESULTS:
: ((:login . t))

